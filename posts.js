const posts = [
   {
        category: "JS",
        title: "Разница между null и undefined в JavaScript.",
        prevContent: "В языке программирования JavaScript термины null и undefined обозначают особые значения",
        content: `В языке программирования JavaScript термины null и undefined обозначают особые значения, 
                    которые используются для представления отсутствия значения или пустоты. 
                    Однако они имеют некоторые различия в своем поведении.
                    <br>
                    <b>undefined:</b><br>
                    <b>undefined</b> означает, что переменная существует, но ей не было присвоено значение. 
                    Это может произойти в следующих случаях:<br>
                    - Переменной была объявлена, но ей не было присвоено значение.<br>
                    - При доступе к несуществующему свойству объекта.<br>
                    - При вызове функции без возвращаемого значения.<br>
                    <br>
                    <b>null:</b><br>
                    <b>null</b> используется, чтобы явно указать, что значение отсутствует или не имеет смысла. 
                    Оно представляет отсутствие значения как пустую ссылку или ничто.<br>
                    Разница между ними:<br>
                    <b>undefined</b> указывает на то, что значение не определено или не было присвоено. <br>
                    <b>null</b> указывает на то, что значение отсутствует или не имеет смысла.`,
        date: '29.08.2023, 22:42:35' 
    },
    { 
        category: "JS",
        title: "Для чего используется оператор '&&'.", 
        prevContent: "В языке JavaScript оператор && представляет логическое 'И' (AND) и используется для проверки нескольких условий.", 
        content: `В языке JavaScript оператор && представляет логическое "И" (AND) и используется для проверки нескольких условий. 
                Он работает следующим образом:<br>
                <b>выражение1 && выражение2</b><br>
                Оператор && возвращает true, если и оба выражение1 и выражение2 истинны (дают true). 
                В противном случае, если хотя бы одно из них ложно (даёт false), оператор вернет false.<br>
                Это позволяет программам принимать решения на основе нескольких условий и выполнять 
                код только при соблюдении всех условий.`,
        date: '29.08.2023, 23:17:04'
    },
    { 
        category: "JS",
        title: "Для чего используется оператор '||' в JavaScript.", 
        prevContent: "В языке JavaScript оператор || представляет логическое 'ИЛИ' (OR) и используется для проверки нескольких условий.", 
        content: `В языке JavaScript оператор || представляет логическое 'ИЛИ' (OR) и 
                  используется для проверки нескольких условий. Он работает следующим образом:<br>
                  <b>выражение1 || выражение2</b><br>
                  Оператор || возвращает true, если хотя бы одно из выражение1 и выражение2 истинно (даёт true). 
                  Если оба выражения ложны (дают false), оператор вернет false.<br>
                  Это позволяет программам принимать решения на основе нескольких условий и выполнять код, 
                  если хотя бы одно из условий истинно.`,
        date: '29.08.2023, 23:29:06'
    },
    { 
        category: "JS",
        title: "Самый быстрый способ преобразования строки в число.", 
        prevContent: "Использование унарного плюса (+) является одним из самых быстрых способов преобразования строки в число в JavaScript.", 
        content: `Использование унарного плюса (+) является одним из самых быстрых способов преобразования 
                строки в число в JavaScript. Унарный плюс выполняет преобразование операнда в числовой тип данных. 
                Если операнд - строка, то он попытается преобразовать её в числовое значение.<br>
                <b>
                let stringValue = "42";<br>
                let numericValue = +stringValue; // преобразование строки в число <br>
                console.log(typeof numericValue); // выведет "number"<br>
                </b><br>
                Однако, стоит учесть, что использование унарного плюса имеет ограничения. 
                Если строка содержит некорректное числовое значение (например, "abc"), 
                то результатом будет значение NaN (Not-a-Number).<br>
                Существует также альтернативные способы преобразования строки в число, такие как использование функции <b>parseInt()</b>, 
                которая позволяет более точно управлять преобразованием и игнорировать лишние символы:<br>
                <b>
                    let stringValue = "42";<br>
                    let numericValue = parseInt(stringValue); // преобразование строки в число<br>
                    console.log(typeof numericValue); // выведет "number"<br>
                </b><br>
                В большинстве случаев унарный плюс будет работать достаточно эффективно для преобразования строк в числа, 
                но если требуется более строгое контролирование преобразования, то можно рассмотреть альтернативные подходы.`,
        date: '29.08.2023, 23:36:30'
    },
    { 
        category: "JS",
        title: "Что такое DOM в JavaScript.", 
        prevContent: "DOM расшифровывается как 'Document Object Model' (Модель объектов документа). ", 
        content: `DOM расшифровывается как "Document Object Model" (Модель объектов документа). 
                В контексте веб-разработки это представляет собой структуру, 
                с помощью которой браузер представляет веб-страницу или документ, позволяя программистам изменять содержимое, 
                структуру и стиль веб-страницы с помощью кода на JavaScript.<br><br>
                DOM представляет HTML (или XML) документ как дерево объектов, где каждый элемент, атрибут, 
                текстовое содержимое и другие части документа являются объектами. Эти объекты могут быть манипулированы 
                с помощью JavaScript, что позволяет динамически изменять содержимое и поведение веб-страницы без необходимости 
                перезагрузки страницы.<br><br>
                Важные концепции DOM:<br>
                1. Элементы: Элементы HTML (например теги: div, p, a) являются объектами DOM.<br>
                2. Атрибуты: Атрибуты HTML (например, class, id, src) также представлены как свойства объектов DOM.<br>
                3. Текстовое содержимое: Текст, который находится между открывающим и закрывающим тегами элемента, доступен как свойство объекта DOM.<br>
                4. Родительство и дочерние элементы: Элементы DOM могут иметь родительские и дочерние элементы, образуя древовидную структуру.<br>
                5. События: DOM поддерживает событийную модель, позволяя реагировать на действия пользователя или другие события.<br>`,
        date: '29.08.2023, 23:46:48'
    },
    { 
        category: "JS",
        title: "Распространение события Event Propogation.", 
        prevContent: "Распространение события Event Propagation в контексте JavaScript означает процесс передачи события от элемента, на котором оно произошло, к его родительским и дочерним элементам в иерархии DOM.", 
        content: `Распространение события (Event Propagation) в контексте JavaScript означает процесс передачи события от 
                элемента, на котором оно произошло, к его родительским и дочерним элементам в иерархии DOM. 
                Это важный аспект модели событий DOM, который определяет порядок, в котором события обрабатываются при 
                взаимодействии пользователя с веб-страницей.<br><br>
                Существует два основных этапа распространения события:<br>
                1. Всплытие (Bubbling): При всплытии событие сначала обрабатывается на самом глубоком (внутреннем) элементе, 
                на котором оно произошло, затем поочередно передается вверх по иерархии DOM, до корневого элемента (обычно это document). 
                Это позволяет создать цепочку обработчиков событий, которые могут реагировать на событие на разных уровнях вложенности.<br>
                2. Погружение (Capturing): При погружении событие сначала обрабатывается на корневом элементе (document) и 
                поочередно передается вниз по иерархии DOM к элементу, на котором событие произошло. Однако погружение редко 
                используется и менее распространено, чем всплытие.<br>
                3. Порядок, в котором события всплывают или погружаются, может быть важным, когда на одном элементе установлено 
                несколько обработчиков событий. Обработчики событий могут быть вызваны в порядке, противоположном их 
                объявлению в коде.<br>`,
        date: '29.08.2023, 23:55:04'
    },
    { 
        category: "JS",
        title: "Разница между методами event.preventDefault() и event.stopPropagation().", 
        prevContent: "<b>event.preventDefault()</b> и <b>event.stopPropagation()</b> - это два различных метода для работы с событиями в JavaScript.", 
        content: `<b>event.preventDefault()</b> и <b>event.stopPropagation()</b> - это два различных метода для работы с событиями в JavaScript, 
                которые влияют на обработку событий и их распространение в DOM. Вот их различия:<br><br>
                1. <b>event.preventDefault()</b>:<br>
                Этот метод предотвращает стандартное поведение браузера по умолчанию в ответ на событие. 
                К примеру, если у вас есть ссылка (<a>), и вы хотите предотвратить переход по этой ссылке при клике, 
                вы можете использовать этот метод. Также, это может быть полезно для предотвращения отправки формы при 
                нажатии на кнопку "Submit".<br>
                2. <b>event.stopPropagation()</b>:<br>
                Этот метод предотвращает дальнейшее распространение события вверх по иерархии DOM или вниз от родительских 
                элементов к дочерним элементам. Это означает, что другие обработчики событий, связанные с этим элементом или 
                его родителями, не будут вызваны.       
        `,
        date: '30.08.2023, 00:04:21'
    },
    { 
        category: "JS",
        title: "Целевой элемент event.target.", 
        prevContent: "Цель события или целевой элемент (event.target) - это элемент DOM, на котором произошло событие.", 
        content: `Цель события или целевой элемент (event.target) - это элемент DOM, на котором произошло событие.
                Это свойство обработчика события предоставляет доступ к элементу, который инициировал событие.<br>
                Когда событие происходит внутри дерева DOM, оно передается по иерархии элементов, начиная с элемента, 
                на котором оно произошло, и заканчивая корневым элементом (document). 
                Цель события (event.target) позволяет получить ссылку на элемент, который вызвал событие.<br>
                Цель события (event.target) особенно полезна при делегировании событий. <br>
                <b>Делегирование событий</b> - это подход, при котором обработчик события устанавливается на родительском элементе, 
                и события, происходящие на дочерних элементах, всплывают к родительскому элементу, где их можно обработать.
                В таких случаях event.target позволяет определить, какой именно дочерний элемент инициировал событие.
        `,
        date: '30.08.2023, 00:11:54'
    },
    { 
        category: "JS",
        title: "Разница между операторами '==' и '==='.", 
        prevContent: "В языке JavaScript операторы == (двойное равенство) и === (тройное равенство) используются для сравнения значений переменных. Однако между ними есть существенная разница:", 
        content: `В языке JavaScript операторы == (двойное равенство) и === (тройное равенство) используются для 
                сравнения значений переменных. Однако между ними есть существенная разница:<br>
                1. == (двойное равенство):<br>
                Оператор == выполняет нестрогое сравнение значений. В этом случае значения сначала преобразуются к одному типу, 
                если они разные, а затем сравниваются.<br>
                2. === (тройное равенство):<br>
                Оператор === выполняет строгое сравнение значений, сравнивая и значения и типы данных. Для истинного результата 
                оба значения должны быть равными и иметь одинаковый тип.<br><br>
                В общем случае, рекомендуется использовать строгое сравнение (===), так как оно более надежное и 
                предотвращает неожиданные преобразования типов. Нестрогое сравнение (==) может приводить к непредсказуемым 
                результатам из-за автоматического преобразования типов.<br>
        `,
        date: '30.08.2023, 00:18:57'
    },
    { 
        category: "JS",
        title: "Результатом сравнения двух похожих объектов является false.", 
        prevContent: "В JavaScript сравнение объектов происходит по ссылке, а не по содержимому. Даже если два объекта имеют одинаковые поля и значения, они будут считаться разными объектами, если они имеют разные ссылки (разные места в памяти).", 
        content: `В JavaScript сравнение объектов происходит по ссылке, а не по содержимому. Даже если два объекта имеют одинаковые поля и значения, они будут считаться разными объектами, если они имеют разные ссылки (разные места в памяти).<br><br>
                <b>
                let obj1 = { value: 42 };<br>
                let obj2 = { value: 42 };<br>
                console.log(obj1 === obj2); // false, так как это два разных<br> 
                </b><br><br>
                В данном случае obj1 и obj2 - это два разных объекта, даже если их содержимое одинаково. 
                Они имеют разные ссылки в памяти, поэтому оператор === возвращает false.<br>
        `,
        date: '30.08.2023, 00:26:08'
    },
   { 
        category: "JS",
        title: "Для чего используется оператор '!!'.", 
        prevContent: "Оператор !! используется в JavaScript для преобразования значения в его булевое представление (логический тип).", 
        content: `Оператор !! используется в JavaScript для преобразования значения в его булевое представление (логический тип). 
                 Этот оператор применяется дважды: первый раз для преобразования значения в булевый тип, а второй раз для 
                 инверсии этого булевого значения. Он позволяет привести различные типы данных к true или false на основе 
                 логических правил.<br><br>
                 Примеры:<br>
                 <b>!!null // false<br>
                 !!undefined // false<br>
                 !!0 // false<br>
                 !!"" // false<br>
                 !!"hello" // true<br>
                 !!42 // true<br>
                 !!{} // true (пустой объект)<br>
                 !![] // true (пустой массив)</b><br><br>
                 Этот оператор часто используется, когда вы хотите явно преобразовать значение в булевый тип или привести 
                 его к булевому контексту. Например, при работе с условиями или операторами, которые ожидают булевые значения.<br><br>
                 Преобразование двойным оператором !! полезно, когда вы хотите явно указать, что вы хотите выполнить 
                 логическую операцию на основе значения, и не полагаться на неявные преобразования, которые могут быть 
                 запутанными в некоторых случаях.<br>
        `,
        date: '30.08.2023, 00:31:54'
    },
   { 
        category: "JS",
        title: "Записать несколько выражений в одну строку?.", 
        prevContent: "В JavaScript, как и во многих других языках программирования, можно записать несколько выражений в одной строке с помощью точки с запятой (;). ", 
        content: `В JavaScript, как и во многих других языках программирования, можно записать несколько выражений в одной 
                 и строке с помощью точки с запятой (;). Точка с запятой используется для разделения выражений и указания на то, 
                 что одно выражение завершилось и начинается следующее. <br><br>
                 <b>
                 let x = 5; let y = 10; console.log(x + y);
                 </b><br><br>
                 Здесь три выражения записаны в одной строке. Однако, хотя это возможно, такой стиль кода может ухудшить 
                 читаемость и поддерживаемость вашего кода. В большинстве случаев рекомендуется использовать отдельные строки 
                 для каждого выражения, чтобы сделать код более понятным.<br><br>
                 Исключением из этого правила могут быть некоторые ситуации, например, при определении переменных с помощью деструктуризации:<br>
                 <b>
                 let [x, y] = [5, 10];<br><br>
                 </b>
                 Этот код также объединяет несколько выражений в одной строке, но это допустимо и даже рекомендуется для таких случаев.
        `,
        date: '30.08.2023, 00:38:11'
    },
   { 
        category: "JS",
        title: "Удвоить целое число и вернуть его.", 
        prevContent: "Вы можете удвоить целое число в JavaScript", 
        content: `Вы можете удвоить целое число в JavaScript, используя оператор умножения (*). Вот пример функции, которая принимает целое 
                    число и возвращает его удвоенное значение:<br><br>
                    <b>
                        const doubleNumber = (number) => { <br>
                        &#160 &#160 &#160 return number * 2; <br>
                        } <br><br>
                        // Пример использования функции <br>
                        const myNumber = 5; <br>
                        const doubledNumber = doubleNumber(myNumber); <br>
                        console.log(doubledNumber); // Выведет 10 <br><br>
                    </b>
                    Просто вызовите функцию doubleNumber() и передайте ей ваше целое число в качестве аргумента, и она вернет удвоенное значение этого числа.
        `,
        date: '12.09.2023, 14:00:37'
    },
    { 
        category: "JS",
        title: "Подсчитать количество овец, присутствующих в массиве.", 
        prevContent: "Рассмотрим массив/список овец, в котором некоторые овцы могут отсутствовать на своем месте", 
        content: `Рассмотрим массив/список овец, в котором некоторые овцы могут отсутствовать на своем месте. Нам нужна функция, 
                    которая подсчитывает количество овец, присутствующих в массиве (истина означает наличие),
                    а также нужно проверить наличие неверных значений, таких как null/undefined.<br><br>
                    <b>
                        function countSheeps(arrayOfSheep) {<br>
                             &#160 &#160 if (!arrayOfSheep || !Array.isArray(arrayOfSheep)) {<br>
                             &#160 &#160 &#160 return 0; // Возвращаем 0, если входной аргумент не является массивом или null/undefined.<br>
                             }<br>
                           
                             // Используем метод filter() для отфильтровывания только значений true в массиве.<br>
                             &#160 &#160 const presentSheep = arrayOfSheep.filter((isPresent) => isPresent === true);<br>
                           
                             // Возвращаем длину отфильтрованного массива, которая будет равна количеству присутствующих овец.<br>
                             &#160 &#160 return presentSheep.length;<br>
                        }<br><br>
                        const sheepArray = [true, true, true, false, true, true, true, true, true, false, true, false, true, false, false, true, true, true, true, true, false, false, true, true];<br>
                        const sheepCount = countSheeps(sheepArray);<br>
                        console.log(sheepCount); // Это выведет 17 в консоль<br><br>
                    </b>
                    Эта функция сначала проверяет, что входной аргумент является массивом и не равен null или undefined. 
                    Затем она использует метод filter(), чтобы отфильтровать только значения true в массиве, и 
                    возвращает длину этого отфильтрованного массива, что и будет количеством присутствующих овец.<br><br>
                    Также эту функцию можно написать в одну строку: <br><br>
                    <b>
                        const countSheeps = (sheep) => Array.isArray(sheep) ? sheep.filter((isPresent) => isPresent === true).length : 0;
                    </b><br>
                    Или третий способ создания функции для этой задачи:
                    <b>
                     function countSheeps(sheep) {<br>
                      &#160 &#160 if(Array.isArray(sheep)) {<br>
                      &#160 &#160 &#160 &#160   return sheep.filter(isPresent => isPresent === true).length;<br>
                      &#160 &#160  } else {<br>
                      &#160 &#160 &#160 &#160   return 0;<br>
                     &#160 &#160  }<br>
                     }<br>
                    </b><br>
                    А также есть еще один интересный способ написать эту функцию:
                    <br><br>
                    <b>
                     function countSheeps(arrayOfSheeps) {<br>
                      &#160 &#160 return arrayOfSheeps.filter(Boolean).length;<br>
                     }<br>
                     </b><br>
                     Или в однус строку:<br>
                     <b>
                     const countSheeps = arrayOfSheeps => arrayOfSheeps.filter(Boolean).length;
                    </b><br>
        `,
        date: '12.09.2023, 16:32:48'
    },
    { 
        category: "JS",
        title: "Функция, которая преобразует входную строку в верхний регистр.", 
        prevContent: "Рассмотрим функцию, которая преобразует входную строку в верхний регистр.", 
        content: `Рассмотрим функцию, которая преобразует входную строку в верхний регистр.<br><br>
                    <b>
                        function makeUpperCase(str) {<br>
                         &#160 &#160 return str.toUpperCase();<br>
                        }<br>
                        const testStr = 'adjfvnjvnjfdnvfdvnlkfdnvfdnv';<br>
                        const strUpperCase = makeUpperCase(testStr);<br>
                        console.log(strUpperCase);<br><br>
                        ADJFVNJVNJFDNVFDVNLKFDNVFDNV<br><br>
                    </b>
                    Эта функция использует метод toUpperCase() для выполнения этой операции, и вызываю эту функцию, 
                    передав ей строку в качестве аргумента, и она вернет эту строку, но уже преобразованную в верхний регистр.
        `,
        date: '12.09.2023, 16:55:19'
    },
   { 
        category: "JS",
        title: "Переворачиваем переданную в функцию строку.", 
        prevContent: "Вот как можно перевернуть строку в JavaScript.", 
        content: `Вот как можно перевернуть строку в JavaScript.<br><br>
                    <b>
                        function reverseString(inputString) {<br>
                            return inputString.split('').reverse().join('');<br>
                        }<br><br>
                        // Примеры использования<br>
                        const result1 = reverseString('world');<br>
                        console.log(result1);  // Вывод: 'dlrow'<br><br>
                    </b>
                    Этот код разбивает строку на массив символов с помощью split(''), 
                    переворачивает массив с помощью reverse(), а затем объединяет элементы обратно в строку с помощью join('').
        `,
        date: '12.09.2023, 18:04:21'
    },
   { 
        category: "JS",
        title: "Разбить слово на массив букв", 
        prevContent: "Разбиваем слово на массив букв в JavaScript.", 
        content: `Разбиваем слово на массив букв в JavaScript.<br><br>
                    <b>
                         const world = 'world';<br>
                         const arrWorld = world.split('');<br>
                         console.log(arrWorld);<br><br>
                    </b>
                    Этот код разбивает строку на массив символов с помощью split('').<br><br>
                    Также эту задачу можно выполнить с помощью "Spread Operator" (оператор распространения) 
                    <b>
                         const world2 = 'world';<br>
                         const arrWorld2 = [...world2]<br>
                         console.log(arrWorld2);<br><br>
                    </b>
                    Этот оператор позволяет разбивать строки (и другие итерируемые объекты) на отдельные элементы
                    и помещать их в новый массив или другую структуру данных.
        `,
        date: '12.09.2023, 18:15:18'
    },
   { 
        category: "JS",
        title: "Вернуть наибольшее и наименьшее число в JavaScript.", 
        prevContent: "В этом небольшом задании вам дается строка чисел, разделенных пробелами, и вы должны вернуть наибольшее и наименьшее число.", 
        content: `В этом небольшом задании вам дается строка чисел, разделенных пробелами, и вы должны вернуть наибольшее 
                    и наименьшее число. Для решения этой задачи вам нужно разбить строку на числа, найти наибольшее и наименьшее число в массиве чисел, 
                    а затем вернуть результат в нужном формате. <br><br>
                    <b>
                         function highAndLow(numbers) {<br>
                            // Разбиваем строку на массив чисел<br>
                            const numberArray = numbers.split(' ').map(Number);<br><br>
                            
                            // Находим наибольшее и наименьшее число<br>
                            const maxNumber = Math.max(...numberArray);<br>
                            const minNumber = Math.min(...numberArray);<br><br>
                            
                            // Формируем результат в нужном формате<br>
                            const result = maxNumber + ' ' + minNumber;<br>
                            
                            return result;<br>
                        }
                        
                        // Примеры использования:<br>
                        console.log(highAndLow("1 2 3 4 5"));    // "5 1"<br><br>
                    </b>
                    Этот код разбивает входную строку на массив чисел, находит наибольшее и наименьшее число в массиве и формирует результат в нужном формате, разделяя числа пробелом.
        `,
        date: '13.09.2023, 13:27:29'
    },
   { 
        category: "JS",
        title: "Сделать в JavaScript - число отрицательным.", 
        prevContent: "Дано число, и вы должны сделать его отрицательным. Но, может быть, число уже отрицательное?", 
        content: `Дано число, и вы должны сделать его отрицательным. Но, может быть, число уже отрицательное? 
                  Число уже может быть отрицательным, и в этом случае никаких изменений не требуется.
                  Ноль (0) не проверяется на наличие какого-либо конкретного знака. <br><br>
                    <b>
                         function makeNegative(num) {<br>
                          &#160 &#160 if (num <= 0) {<br>
                          &#160 &#160 &#160 &#160        return +num;<br>
                          &#160 &#160 } else {<br>
                          &#160 &#160 &#160 &#160 num = '-' + num;<br>
                          &#160 &#160 &#160 &#160 return +num;<br>
                          &#160 &#160}<br>
                          }<br><br>
                  
                          console.log(makeNegative(1));<br><br>
                    </b>
                    Также этот код можно выполнить иным способом:<br><br>
                    <b>
                        function makeNegative(num) {<br>
                          return -Math.abs(num);<br>
                        }<br><br>
                    </b>`,
                    
        date: '13.09.2023, 13:27:29'
    },
    { 
        category: "JS",
        title: "Удалить все гласные из строки.", 
        prevContent: "Функция, которая принимает строку и возвращает новую строку, из которой удалены все гласные.", 
        content: `
                 Функция, которая принимает строку и возвращает новую строку, из которой удалены все гласные.
                    можно реализовать эту функцию на JavaScript, используя регулярные выражения для удаления всех гласных из строки.
                    <br><br>
                    <b>
                         function removeVowels(str) {<br>
                         &#160 &#160 // Используем регулярное выражение для удаления гласных  из строки<br>
                         &#160 &#160 const result = str.replace(/[aeiouауоыэяюёиеAEIOUАУСЫЭЯЮЕИ]/g, '');<br>
                         &#160 &#160 return result;<br>
                          }<br><br>
            
                    // Пример использования:<br>
                    const inputString = "Этот сайт для неудачников LOL!";<br>
                    const outputString = removeVowels(inputString);<br>
                    console.log(outputString); // "тт сйт дл ндчнкв LL!"<br><br>
                                </b>
                     Реализация с помощью стрелочной функции<br>
                     <b>
                        const disemvowel = str => str.replace(/[aeiouAEIOU]/g, '');<br>
                     </b>
        `,
        date: '13.09.2023, 15:20:23'
    },
    { 
        category: "JS",
        title: "Вычислить среднее значение чисел в заданном списке.", 
        prevContent: "На JavaScript, вычисляем среднее значение чисел в заданном списке. Если массив пустой, функция вернет 0.", 
        content: `На JavaScript, вычисляем среднее значение чисел в заданном списке. Если массив пустой, функция вернет 0.
                    <br><br>
                    <b>
                         function calculateAverage(numbers) {<br>
                          // Проверяем, пуст ли массив<br>
                          if (numbers.length === 0) {<br>
                            return 0;<br>
                          }<br><br>
                        
                          // Суммируем все числа в массиве<br>
                          const sum = numbers.reduce((acc, curr) => acc + curr, 0);<br>
                        
                          // Вычисляем среднее значение<br>
                          const average = sum / numbers.length;<br><br>
                        
                          return average;<br>
                        }<br><br>
                        
                        // Пример использования функции:<br>
                        const numbers = [1, 2, 3, 4, 5];<br>
                        const average = calculateAverage(numbers);<br>
                        console.log(average); // Выводим среднее значение<br><br>
                     </b>
        `,
        date: '13.09.2023, 16:40:54'
    },
    { 
        category: "JS",
        title: "Вернуть аддитивную обратную величину набора чисел.", 
        prevContent: "На JavaScript, вычисляем среднее значение чисел в заданном списке. Если массив пустой, функция вернет 0.", 
        content: `Учитывая набор чисел, возращаем аддитивную обратную величину каждого из них. 
                    Каждое положительное становится отрицательным, а отрицательное становится положительным.
                    <br><br>
                    <b>
                    function invert(numbers) {<br>
                     &#160 &#160 // Создаем новый массив с аддитивной обратной величиной каждого числа<br>
                     &#160 &#160 const invertedNumbers = numbers.map(num => -num);<br>
                     &#160 &#160 return invertedNumbers;<br>
                     }<br><br>
                     
                     // Примеры использования:<br>
                     const result1 = invert([1, 2, 3, 4, 5]);<br>
                     const result2 = invert([1, -2, 3, -4, 5]);<br>
                     const result3 = invert([]);<br>
                     console.log(result1);  // Результат: [-1, -2, -3, -4, -5]<br>
                     console.log(result2);  // Результат: [-1, 2, -3, 4, -5]<br>
                     console.log(result3);  // Результат: []<br><br>               
                     </b>
        `,
        date: '13.09.2023, 17:31:53'
    },
   { 
        category: "JS",
        title: "Преобразование числа в перевернутый массив цифр в JavaScript.", 
        prevContent: "Преобразование числа в перевернутый массив цифр в JavaScript.", 
        content: `Преобразование числа в перевернутый массив цифр в JavaScript.
                    <br><br>
                    <b>
                    function reverseNumberToArray(num) {<br>
                       &#160 &#160 // Преобразуем число в строку, разбиваем строку на массив символов, переворачиваем массив и парсим каждый символ обратно в число<br>
                       &#160 &#160 return Array.from(num.toString()).reverse().map(Number);<br>
                     }<br><br>
                     
                     // Примеры использования:<br>
                     const result1 = reverseNumberToArray(35231);<br>
                     const result2 = reverseNumberToArray(0);<br>
                     console.log(result1);  // Результат: [1, 3, 2, 5, 3]<br>
                     console.log(result2);  // Результат: [0]<br><br>
                    </b>
                    Эта функция преобразует число в строку, затем разбивает строку на массив символов, 
                    переворачивает этот массив и, наконец, преобразует каждый символ обратно в число, 
                    создавая массив перевернутых цифр.
        `,
        date: '13.09.2023, 19:10:45'
    },
    { 
        category: "JS",
        title: "Фильтруем список строк и возвращаем слова в 4 буквы.", 
        prevContent: "Проверяем массив содержащий список имен и если в имени ровно 4 буквы", 
        content: `Проверяем массив содержащий список имен и если в имени ровно 4 буквы, тогда true, в противном случае, false.
                   Для решения этой задачи используеться метод filter для фильтрации списка имен, содержащих ровно 4 буквы. 
                    <br><br>
                    <b>
                       const friend = friends => friends.filter(name => name.length === 4);<br><br>

                       // Пример использования:<br>
                        const inputNames = ["Ryan", "Kieran", "Mark"];<br>
                        const result = friend(inputNames);<br>
                        console.log(result);  // Результат: ["Ryan", "Mark"]<br><br>
                    </b>
                     Эта функция фильтрует имена входного массива names, оставляя только те, 
                     которые содержат ровно 4 буквы, и возвращает новый массив с именами.
        `,
        date: '13.09.2023, 19:26:15'
    },
   { 
        category: "JS",
        title: "Вычислить сумму всех целых чисел между a и b.", 
        prevContent: "Вычисляем сумму всех целых чисел между a и b (включая a и b), и возвращаем эту сумму. ", 
        content: `Вычисляем сумму всех целых чисел между a и b (включая a и b), и возвращаем эту сумму.
                    Если a и b равны, функция просто возвращает одно из них. 
                    <br><br>
                    <b>
                    function sumAll(a, b) {<br>
                          &#160 &#160  if (a === b) {<br>
                            &#160 &#160 &#160 return a;<br>
                          &#160 &#160 } else {<br>
                          &#160 &#160 &#160   let min = Math.min(a, b);<br>
                          &#160 &#160 &#160  let max = Math.max(a, b);<br>
                          &#160 &#160 &#160  let sum = 0;<br><br>
                            
                          &#160 &#160 &#160  for (let i = min; i <= max; i++) {<br>
                          &#160 &#160 &#160    sum += i;<br>
                      &#160 &#160 }<br>
                          &#160 &#160 &#160  return sum;<br>
                         &#160 &#160 }<br>
                        }<br><br>
                        
                        // Примеры использования:<br>
                        console.log(sumAll(1, 0));   // Вывод: 1<br>
                        console.log(sumAll(1, 2));   // Вывод: 3<br>
                        console.log(sumAll(0, 1));   // Вывод: 1<br>
                        console.log(sumAll(1, 1));   // Вывод: 1
                        <br><br>
                    </b>
                   Эта функция проверяет, равны ли a и b, и возвращает одно из них, если они равны. 
                   В противном случае она определяет минимальное и максимальное из двух чисел, а затем использует 
                   цикл для нахождения суммы всех целых чисел между ними и включая сами числа.
        `,
        date:  '13.09.2023, 20:05:50'
    },
   { 
        category: "JS",
        title: "Посчитать сумму положительных чисел в массиве.", 
        prevContent: "Получить массив чисел, вернуть сумму всех положительных чисел.", 
        content: `Получить массив чисел, вернуть сумму всех положительных чисел. Если суммировать нечего, сумма по умолчанию равна 0.
                    <br><br>
                    <b>
                      function sumPositiveNumbers(arr) {<br>
                       &#160 &#160 // Используем метод reduce для вычисления суммы положительных чисел<br>
                       &#160 &#160 return arr.reduce((sum, num) => {<br>
                       &#160 &#160 &#160 // Проверяем, является ли число положительным<br>
                       &#160 &#160 &#160  if (num > 0) {<br>
                       &#160 &#160 &#160 &#160 // Если число положительное, добавляем его к сумме<br>
                       &#160 &#160 &#160 &#160 &#160 return sum + num;<br>
                       &#160 &#160 &#160 }<br>
                       &#160 &#160 &#160  // Если число не положительное, возвращаем текущую сумму без изменений<br>
                       &#160 &#160 &#160  return sum;<br>
                       &#160 &#160 }, 0); // Начальное значение суммы равно 0<br>
                     }<br><br>
                     
                     // Пример использования:<br>
                     const numbers = [1, -4, 7, 12];<br>
                     const result = sumPositiveNumbers(numbers);<br>
                     console.log(result); // Выводит 20<br>
                   </b><br><br>
                   Эта функция sumPositiveNumbers принимает массив чисел arr и использует метод reduce для вычисления суммы положительных чисел в массиве. 
                   Начальное значение суммы установлено на 0, и затем мы проверяем каждое число в массиве. Если число положительное, 
                   мы добавляем его к текущей сумме, в противном случае сумма остается без изменений. 
                   В результате функция возвращает сумму положительных чисел из массива.<br><br>
                   Можно написать данную функцию в одну строку используя синткасис стрелочной функции.
                   <b>
                     const positiveSum = (arr = []) => arr.reduce((sum, num) => num > 0 ? sum + num : sum, 0);
                   </b><br>
                   Внутри reduce мы используем тернарный оператор для условной проверки и непосредственно возвращаем результат выражения 
                   num > 0 ? sum + num : sum. Таким образом, функция positiveSum остается функционально эквивалентной, но записана в одну строку.
        `,
        date:  '14.09.2023, 20:24:05'
    },
   { 
        category: "JS",
        title: "Умножение заданного числа на восемь, если оно четное, иначе на девять.", 
        prevContent: "Проверить четность числа можно с помощью % (оператор остатка), который возвращает остаток от деления числа на другое число.", 
        content: `Проверить четность числа можно с помощью % (оператор остатка), который возвращает остаток от деления числа на другое число.
                    Итак, выражение number % 2 === 0 проверяет, является ли число четным, и возвращает true, если оно четное, и false, если нечетное.
                    <br><br>
                    <b>
                      function simpleMultiplication(value){<br>
                        &#160 &#160  if(value % 2 === 0) {<br>
                        &#160 &#160  &#160 &#160 return value * 8<br>
                        &#160 &#160 } else {<br>
                        &#160 &#160  &#160 &#160 return value * 9;<br>
                        &#160 &#160 }<br>
                     }<br>
                   </b><br><br>
                   Можно написать данную функцию в одну строку используя синткасис стрелочной функции.
                   <b>
                      const simpleMultiplication = number => number % 2 === 0 ? number * 8 : number * 9;
                   </b><br>
                   Этот код работает так же, как и предыдущий вариант, но более кратко и компактно записан в одну строку.
        `,
        date:  '14.09.2023, 20:52:32'
    },
   { 
        category: "JS",
        title: "Нахождение третьего угла треугольника.", 
        prevContent: "Даны два внутренних угла (в градусах) треугольника, необходимо вернуть 3-е число.", 
        content: `Даны два внутренних угла (в градусах) треугольника, необходимо вернуть 3-е число. Будут проверяться только положительные целые числа.
                    <br><br>
                    <b>
                      function otherAngle(a, b){<br>
                        &#160 &#160  const totalAngle = 180;<br>
                        &#160 &#160  const thirdAngle = totalAngle - angle1 - angle2;<br>
                        &#160 &#160 return thirdAngle;<br>
                     }<br>
                   </b><br><br>
                   Можно написать данную функцию в одну строку используя синткасис стрелочной функции.
                   <b>
                      const otherAngle=(a, b) => 180 - a - b;
                   </b><br>
                   Эта функция принимает два входных угла (a) и (b), а затем вычисляет третий угол, вычитая сумму известных углов из 180 градусов.
        `,
        date:  '14.09.2023, 22:49:42'
    },
   { 
        category: "JS",
        title: "Нахождение третьего угла треугольника.", 
        prevContent: "Даны два внутренних угла (в градусах) треугольника, необходимо вернуть 3-е число.", 
        content: `Даны два внутренних угла (в градусах) треугольника, необходимо вернуть 3-е число. Будут проверяться только положительные целые числа.
                    <br><br>
                    <b>
                      function boolToWord( bool ){<br>
                        &#160 &#160  if(bool) {<br>
                        &#160 &#160  &#160 &#160 return "Yes";<br>
                        &#160 &#160 } else {<br>
                        &#160 &#160 &#160 &#160 return "No";<br>
                        &#160 &#160 }
                     }<br>
                   </b><br><br>
                   Можно написать данную функцию в одну строку используя синткасис стрелочной функции.
                   <b>
                      const boolToWord = bool => bool ? "Yes" : "No";
                   </b><br>
                   Эта функция принимает bool (логическое значение) и использует тернарный оператор (? :) 
                   для проверки значения bool. Если bool равно true, то функция вернет "Yes", иначе вернет "No".
        `,
        date:  '14.09.2023, 23:04:37'
    },
   { 
        category: "JS",
        title: "Преобразовать данное логическое значение в его строковое представление.", 
        prevContent: "Для преобразования логического значения в его строковое представление используя тернарный оператор.", 
        content: `Для преобразования логического значения в его строковое представление используя тернарный оператор, 
                    где функция boolToString принимает логическое значение b и возвращает "true", если b равно true, и "false", если b равно false.
                    <br><br>
                    <b>
                      function boolToString( b ){<br>
                        &#160 &#160  return b ? "true" : "false";<br>
                     }<br><br>

                     // Пример использования:<br>
                     const trueString = boolToString(true); // "true"<br>
                     const falseString = boolToString(false); // "false"<br>
                   </b><br><br>
                   Можно написать данную функцию в одну строку используя синткасис стрелочной функции.
                   <b>
                      const booleanToString = (b) => b ? "true" : "false";
                   </b><br>
                   Также можно использовать метод toString() для преобразования логического значения в его строковое представление. <br>
                   <b>
                     function booleanToString(b) {<br>
                      &#160 &#160  return b.toString();<br>
                     }
                   </b><br><br>
                   Также в JS можно преобразовать булевое значение в строковое с помощью конкатенации.<br>
                   <b>
                     function booleanToString( b ) {<br>
                     &#160 &#160 return b + ' ';<br>
                     }
                   </b>
                   В JavaScript оператор конкатенации (+) в данном контексте автоматически приводит логическое значение к его строковому представлению. 
                   Таким образом, true будет преобразовано в строку "true", и false будет преобразовано в строку "false".
                   Этот подход к преобразованию булевых значений в строки является коротким и понятным способом, хотя более явное использование toString()
                   может быть более читаемым в некоторых случаях, чтобы явно указать намерение преобразования в строку.
        `,
        date:  '14.09.2023, 23:35:59'
    },
];

/* new Date().toLocaleString() */
